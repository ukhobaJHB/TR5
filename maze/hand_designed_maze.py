import robot

maze = ["xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx",
"xxxxxxxxxxxxxxxxxxxxxxxxxx0xxx0xxxxxxxxxxxxxxxxxxx",
"xxx0xxxxxxxxxxxxxxxxxxxxxx0xxx0xxxxxxxxxxxxxxxxxxx",
"xxx0xxx00000000000000000000xxx00000000000000000000",
"xxx0xxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxx0",
"xxx0xxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxx0",
"xxx0xxxxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxx0",
"xxx0xxxxxxxxxxxxx00000000000000xxx0000000000000000",
"xxx0xxxxxxxxxxxxx0xxxxxxxxxxxx0xxx0xxxxxxxxxxxxxxx",
"0000000000xxxxxxx0xxxxxxxxxxxx0xxx0xxxxxxxxxxxxxxx",
"xxxxxxxxx0xxxxxxx0xxxxxxxxxxxx0xxx0xxxxxxxxxxxxxxx",
"xxxxxxxxx0xxxxxxx0xxx0000000000xxx0xxx0xxx00000000",
"xxxxxxxxx0xxxxxxx0xxx0xxxxxxxx0xxx0xxx0xxx0xxxxxxx",
"xxxx0xxxx0xxx0xxx0xxx0xxxxxxxx0xxx0xxx0xxx0xxxxxxx",
"xxxx0xxxx0xxx0xxx0xxx0xxxxxxxx0xxx0xxx0xxx0xxxxxxx",
"xxxx0xxxx0xxx0xxx0xxx0xxxx0xxx0xxx0xxx0xxx0xxx0xxx",
"xxxx0xxxxxxxx0xxx0xxx0xxxx0xxx0xxx0xxx0xxx0xxx0xxx",
"xxxx0xxxxxxxx0xxx0xxx0xxxx0xxx0xxx0xxx0xxx0xxx0xxx",
"xxxx0xxxxxxxx0xxx0xxx0xxxx0xxx0xxx0xxx0xxx0xxx0xxx",
"00000000000000xxxxxxx0xxxx0xxx0xxx0xxx0xxx0xxx0xxx",
"xxxxxxxxx0xxx0xxxxxxx0xxxx0xxx0xxx0xxx0xxx0xxx0xxx",
"xxxxxxxxx0xxx0xxxxxxx0xxxx0xxxxxxxxxxx0xxxxxxx0000",
"xxxxxxxxx0xxx00000xxx0xxxx0xxxxxxxxxxx0xxxxxxx0xxx",
"xxxx0xxxx0xxxxxxx0xxx0xxxx000000000000000000000xxx",
"xxxx0xxxx0xxxxxxx0xxx0xxxx0xxx0xxxxxxx0xxxxxxx0xxx",
"xxxx0xxxx0xxxxxxx0xxx0xxxx0xxx0xxxxxxx0xxxxxxx0xxx",
"xxxx0xxxx0xxx0xxx0xxx0xxxx0xxx0xxxxxxx0xxxxxxx0xxx",
"xxxx0xxxx0xxx0xxx0xxx0xxxxxxxx0xxx0xxx00000xxx0xxx",
"xxxx0xxxx0xxx0xxx0xxx0xxxxxxxx0xxx0xxxxxxx0xxx0xxx",
"xxxx0xxxx0xxx0xxx0xxx0xxxxxxxx0xxx0xxxxxxx0xxx0xxx",
"00000xxxxxxxx0xxx0xxx0xxxxxxxxxxxx0xxxxxxx0xxx0000",
"xxxxxxxxxxxxx0xxx0xxx0xxxxxxxxxxxx00000xxx0xxxxxxx",
"xxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxx0xxx0xxx0xxxxxxx",
"xxxxxxxxxxxxx0xxxxxxxxxxxxxxxxxxxx0xxx0xxx0xxxxxxx",
"00000xxxx00000000000000000000000000xxx0xxx00000xxx",
"xxxx0xxxx0xxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxx0xxx",
"xxxx0xxxx0xxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxx0xxx",
"xxxx0xxxx0xxxxxxxxxxxxxxxxxxxxxxxx0xxxxxxxxxxx0xxx",
"xxxx0xxxxxxxx00000000000000000xxxx0xxx000000000xxx",
"xxxx0xxxxxxxx0xxxxxxxxxxxxxxx0xxxx0xxx0xxxxxxxxxxx",
"xxxx0xxxxxxxx0xxxxxxxxxxxxxxx0xxxx0xxx0xxxxxxxxxxx",
"xxxx0xxxxxxxx0xxxxxxxxxxxxxxx0xxxx0xxx000000xxxxxx",
"xxxx0xxxx00000xxxxx000000xxxx0xxxxxxxxxxxxx0000000",
"xxxx0xxxx0xxxxxxxxx0xxxx0xxxx0xxxxxxxxxxxxx0xxxxxx",
"xxxx0xxxx0xxxxxxxxx0xxxx0xxxx0xxxxx000000000xxxxxx",
"xxxx0xxxx00000000000xxxxxxxxxxxxxxx0xxxxx0xxxxxxxx",
"xxxx0xxxxxxxx0xxxxxxxxxxxxxxxxxxxxx0xxxxx0xxxxxxxx",
"xxxx0xxxxxxxx0xxxxxxxxxxxxxxxxxxxxx0xxxxx0xxxxxxxx",
"xxxx0xxxxxxxx0xxxxxxxxxx000000000000xxxxx000000000",
"xxxx0xxxxxxxx0xxxxx0xxxxxxxxxxxxxxxxxxxxx0xxxxxxxx",
"xxxx0xxxxxxxx0xxxxx0xxxxxxxxxxxxxxxxxxxxx0xxxxxxxx"]


obstacles = []

def create_random_obstacles():
    '''
    Returns a random number (up to 10) of randomly positioned obstacles.
    *does not take any parameters
    '''

    global obstacles

    maze_inverse = maze[::-1]

    obstacles_list = []
    for y in range(len(maze)*2):
        try:
            for x in range(len(maze[y])):
                screen_x = -100 + (x*4)
                screen_y = 200 - (y*4)

                if maze[y][x] == '0':
                    obstacles_list.append((screen_x,screen_y))

        except IndexError:
            for x in range(len(maze_inverse[y-len(maze)])):
                screen_x = -100 + (x*4)
                screen_y = 200 - (y*4)

                if maze_inverse[y-len(maze)][x] == '0':
                    obstacles_list.append((screen_x,screen_y))

    obstacles.extend(obstacles_list)
    return obstacles_list

def is_position_blocked(x,y):
    '''
    Returns True if position (x,y) falls inside an obstacle.
    *Param: x, y
    '''
    for (obstacle_x, obstacle_y) in obstacles:
        if obstacle_x <= x <= obstacle_x + 3 and obstacle_y <= y <= obstacle_y + 3:
            return True
    return False

def is_path_blocked(x1,y1, x2, y2):
    '''
    Returns True if there is an obstacle in the line between the coordinates (x1, y1) and (x2, y2).
    *Param: x1, y1, x2, y2
    '''
    for(obstacle_x,obstacle_y) in obstacles:
        
        if x1 == x2 and obstacle_x <= x1 <= obstacle_x + 3 and (y1 < obstacle_y < y2 or 
        y1 > obstacle_y > y2):
            return True
        if y1 == y2 and obstacle_y <= y1 <= obstacle_y + 3 and (x1 < obstacle_x < x2 or 
        x1 > obstacle_x > x2):
            return True
    return False

def get_obstacles():# robot_name
    # print(robot_name+': Loaded hand_designed_maze.')
    global obstacles
    # obstacles = create_random_obstacles()
    obstacles.sort()
    return obstacles